============================================
cva6/uvma_cva6_core_cntrl_drv
============================================

// Copyright 2023 OpenHW Group
// Copyright 2023 Datum Technology Corporation
// Copyright 2023 Silicon Labs, Inc.
//
// Licensed under the Solderpad Hardware Licence, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://solderpad.org/licenses/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

`ifndef __UVMA_CVA6_CORE_CNTRL_DRV_SV__
`define __UVMA_CVA6_CORE_CNTRL_DRV_SV__

/**
 * Component driving bootstrap pins and other misecllaneous I/O for cva6 core
 */
class uvma_cva6_core_cntrl_drv_c extends uvma_core_cntrl_drv_c;

   `uvm_component_utils_begin(uvma_cva6_core_cntrl_drv_c)
   `uvm_component_utils_end

   /**
    * Default constructor.
    */
   extern function new(string name="uvma_cva6_core_cntrl_drv", uvm_component parent=null);

   extern task drive_bootstrap();

endclass : uvma_cva6_core_cntrl_drv_c

function uvma_cva6_core_cntrl_drv_c::new(string name="uvma_cva6_core_cntrl_drv", uvm_component parent=null);

   super.new(name, parent);

endfunction : new

task uvma_cva6_core_cntrl_drv_c::drive_bootstrap();

   uvma_cva6_core_cntrl_cntxt_c cva6_cntxt;

   $cast(cva6_cntxt, cntxt);

   cva6_cntxt.core_cntrl_vif.boot_addr  = cfg.boot_addr;

endtask : drive_bootstrap

`endif // __UVMA_CVA6_CORE_CNTRL_DRV_SV__

----

(source_file
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (conditional_compilation_directive
    (ifdef_condition
      (simple_identifier)))
  (text_macro_definition
    (text_macro_name
      (simple_identifier)))
  (block_comment)
  (class_declaration
    name: (simple_identifier)
    (class_type
      (simple_identifier))
    (class_item
      (text_macro_usage
        (simple_identifier)
        (list_of_actual_arguments
          (actual_argument
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))))))))
    (class_item
      (text_macro_usage
        (simple_identifier)))
    (block_comment)
    (class_item
      (class_method
        (class_constructor_prototype
          (class_constructor_arg_list
            (class_constructor_arg
              (tf_port_item
                (data_type_or_implicit
                  (data_type))
                name: (simple_identifier)
                (expression
                  (primary
                    (primary_literal
                      (string_literal
                        (quoted_string
                          (quoted_string_item))))))))
            (class_constructor_arg
              (tf_port_item
                (data_type_or_implicit
                  (data_type
                    (simple_identifier)))
                name: (simple_identifier)
                (expression
                  (primary))))))))
    (class_item
      (class_method
        (task_prototype
          name: (simple_identifier))))
    (simple_identifier))
  (class_constructor_declaration
    (class_scope
      (class_type
        (simple_identifier)))
    (class_constructor_arg_list
      (class_constructor_arg
        (tf_port_item
          (data_type_or_implicit
            (data_type))
          name: (simple_identifier)
          (expression
            (primary
              (primary_literal
                (string_literal
                  (quoted_string
                    (quoted_string_item))))))))
      (class_constructor_arg
        (tf_port_item
          (data_type_or_implicit
            (data_type
              (simple_identifier)))
          name: (simple_identifier)
          (expression
            (primary)))))
    (list_of_arguments
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))))
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))))))
  (task_declaration
    (task_body_declaration
      (class_scope
        (class_type
          (simple_identifier)))
      name: (simple_identifier)
      (block_item_declaration
        (data_declaration
          (data_type_or_implicit
            (data_type
              (simple_identifier)))
          (list_of_variable_decl_assignments
            (variable_decl_assignment
              name: (simple_identifier)))))
      (statement_or_null
        (statement
          (statement_item
            (subroutine_call_statement
              (subroutine_call
                (system_tf_call
                  (system_tf_identifier)
                  (list_of_arguments
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier))))
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier)))))))))))
      (statement_or_null
        (statement
          (statement_item
            (blocking_assignment
              (operator_assignment
                (variable_lvalue
                  (hierarchical_identifier
                    (simple_identifier)
                    (simple_identifier)
                    (simple_identifier)))
                (assignment_operator)
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier)
                      (simple_identifier)))))))))
      (simple_identifier)))
  (conditional_compilation_directive)
  (one_line_comment))
