============================================
cva6/stream_filter
============================================

// Copyright 2018 ETH Zurich and University of Bologna.
// Copyright and related rights are licensed under the Solderpad Hardware
// License, Version 0.51 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
// or agreed to in writing, software, hardware and materials distributed under
// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Stream filter: If `drop_i` is `1`, signal `ready` to the upstream regardless of the downstream,
// and do not propagate `valid` downstream.  Otherwise, connect upstream to downstream.
module stream_filter (
    input  logic valid_i,
    output logic ready_o,

    input  logic drop_i,

    output logic valid_o,
    input  logic ready_i
);

    assign valid_o = drop_i ? 1'b0 : valid_i;
    assign ready_o = drop_i ? 1'b1 : ready_i;

endmodule

----

(source_file
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (module_declaration
    (module_ansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_port_declarations
        (ansi_port_declaration
          (variable_port_header
            (port_direction)
            (variable_port_type
              (data_type
                (integer_vector_type))))
          port_name: (simple_identifier))
        (ansi_port_declaration
          (variable_port_header
            (port_direction)
            (variable_port_type
              (data_type
                (integer_vector_type))))
          port_name: (simple_identifier))
        (ansi_port_declaration
          (variable_port_header
            (port_direction)
            (variable_port_type
              (data_type
                (integer_vector_type))))
          port_name: (simple_identifier))
        (ansi_port_declaration
          (variable_port_header
            (port_direction)
            (variable_port_type
              (data_type
                (integer_vector_type))))
          port_name: (simple_identifier))
        (ansi_port_declaration
          (variable_port_header
            (port_direction)
            (variable_port_type
              (data_type
                (integer_vector_type))))
          port_name: (simple_identifier))))
    (continuous_assign
      (list_of_net_assignments
        (net_assignment
          (net_lvalue
            (simple_identifier))
          (expression
            (conditional_expression
              (expression
                (primary
                  (hierarchical_identifier
                    (simple_identifier))))
              (expression
                (primary
                  (primary_literal
                    (integral_number
                      (binary_number
                        size: (unsigned_number)
                        base: (binary_base)
                        value: (binary_value))))))
              (expression
                (primary
                  (hierarchical_identifier
                    (simple_identifier)))))))))
    (continuous_assign
      (list_of_net_assignments
        (net_assignment
          (net_lvalue
            (simple_identifier))
          (expression
            (conditional_expression
              (expression
                (primary
                  (hierarchical_identifier
                    (simple_identifier))))
              (expression
                (primary
                  (primary_literal
                    (integral_number
                      (binary_number
                        size: (unsigned_number)
                        base: (binary_base)
                        value: (binary_value))))))
              (expression
                (primary
                  (hierarchical_identifier
                    (simple_identifier)))))))))))
