============================================
cva6/ecc_pkg
============================================

// Copyright 2020 ETH Zurich and University of Bologna.
// Copyright and related rights are licensed under the Solderpad Hardware
// License, Version 0.51 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
// or agreed to in writing, software, hardware and materials distributed under
// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// Author: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
//
/// Contains common ECC definitions and helper functions.

package ecc_pkg;

  // Calculate required ECC parity width:
  function automatic int unsigned get_parity_width (input int unsigned data_width);
    // data_width + cw_width + 1 <= 2**cw_width
    int unsigned cw_width = 2;
    while (unsigned'(2**cw_width) < cw_width + data_width + 1) cw_width++;
    return cw_width;
  endfunction

  // Calculate required ECC codeword width:
  function automatic int unsigned get_cw_width (input int unsigned data_width);
    // data width + parity width + one additional parity bit (for double error detection)
    return data_width + get_parity_width(data_width);
  endfunction

endpackage

----

(source_file
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (package_declaration
    name: (simple_identifier)
    (one_line_comment)
    (package_item
      (function_declaration
        (lifetime)
        (function_body_declaration
          (data_type_or_void
            (data_type
              (integer_atom_type)))
          name: (simple_identifier)
          (tf_port_list
            (tf_port_item
              (tf_port_direction
                (port_direction))
              (data_type_or_implicit
                (data_type
                  (integer_atom_type)))
              name: (simple_identifier)))
          (one_line_comment)
          (block_item_declaration
            (data_declaration
              (data_type_or_implicit
                (data_type
                  (integer_atom_type)))
              (list_of_variable_decl_assignments
                (variable_decl_assignment
                  name: (simple_identifier)
                  (expression
                    (primary
                      (primary_literal
                        (integral_number
                          (decimal_number
                            (unsigned_number))))))))))
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (loop_statement
                    (expression
                      left: (expression
                        (primary
                          (cast
                            (casting_type)
                            (expression
                              left: (expression
                                (primary
                                  (primary_literal
                                    (integral_number
                                      (decimal_number
                                        (unsigned_number))))))
                              right: (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier))))))))
                      right: (expression
                        left: (expression
                          left: (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))
                          right: (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier)))))
                        right: (expression
                          (primary
                            (primary_literal
                              (integral_number
                                (decimal_number
                                  (unsigned_number))))))))
                    (statement_or_null
                      (statement
                        (statement_item
                          (blocking_assignment
                            (inc_or_dec_expression
                              (variable_lvalue
                                (hierarchical_identifier
                                  (simple_identifier)))
                              (inc_or_dec_operator)))))))))))
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (jump_statement
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier))))))))))))
    (one_line_comment)
    (package_item
      (function_declaration
        (lifetime)
        (function_body_declaration
          (data_type_or_void
            (data_type
              (integer_atom_type)))
          name: (simple_identifier)
          (tf_port_list
            (tf_port_item
              (tf_port_direction
                (port_direction))
              (data_type_or_implicit
                (data_type
                  (integer_atom_type)))
              name: (simple_identifier)))
          (one_line_comment)
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (jump_statement
                    (expression
                      left: (expression
                        (primary
                          (hierarchical_identifier
                            (simple_identifier))))
                      right: (expression
                        (primary
                          (function_subroutine_call
                            (subroutine_call
                              (tf_call
                                (hierarchical_identifier
                                  (simple_identifier))
                                (list_of_arguments
                                  (expression
                                    (primary
                                      (hierarchical_identifier
                                        (simple_identifier)))))))))))))))))))))
