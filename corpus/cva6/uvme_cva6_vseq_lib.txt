============================================
cva6/uvme_cva6_vseq_lib
============================================

// Copyright 2020 OpenHW Group
// Copyright 2020 Datum Technology Corporation
// Copyright 2021 Thales DIS Design Services SAS
//
// Licensed under the Solderpad Hardware Licence, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://solderpad.org/licenses/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.0


`ifndef __UVME_CVA6_VSEQ_LIB_SV__
`define __UVME_CVA6_VSEQ_LIB_SV__


/**
 * Virtual sequence library for CVA6 environment.
 */
class uvme_cva6_vseq_lib_c extends uvm_sequence_library#(
   .REQ(uvm_sequence_item),
   .RSP(uvm_sequence_item)
);

   `uvm_object_utils          (uvme_cva6_vseq_lib_c)
   `uvm_sequence_library_utils(uvme_cva6_vseq_lib_c)


   /**
    * Initializes sequence library.
    */
   extern function new(string name="uvme_cva6_vseq_lib");

endclass : uvme_cva6_vseq_lib_c


function uvme_cva6_vseq_lib_c::new(string name="uvme_cva6_vseq_lib");

   super.new(name);
   init_sequence_library();

   // TODO Add sequences to uvme_cva6_vseq_lib_c
   //      Ex: add_sequence(uvme_cva6_abc_vseq_c::get_type());

endfunction : new


`endif // __UVME_CVA6_VSEQ_LIB_SV__

----

(source_file
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (conditional_compilation_directive
    (ifdef_condition
      (simple_identifier)))
  (text_macro_definition
    (text_macro_name
      (simple_identifier)))
  (block_comment)
  (class_declaration
    name: (simple_identifier)
    (class_type
      (simple_identifier)
      (parameter_value_assignment
        (list_of_parameter_value_assignments
          (named_parameter_assignment
            (simple_identifier)
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier)))))))
          (named_parameter_assignment
            (simple_identifier)
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))))))))
    (class_item
      (text_macro_usage
        (simple_identifier)
        (list_of_actual_arguments
          (actual_argument
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))))))))
    (class_item
      (text_macro_usage
        (simple_identifier)
        (list_of_actual_arguments
          (actual_argument
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))))))))
    (block_comment)
    (class_item
      (class_method
        (class_constructor_prototype
          (class_constructor_arg_list
            (class_constructor_arg
              (tf_port_item
                (data_type_or_implicit
                  (data_type))
                name: (simple_identifier)
                (expression
                  (primary
                    (primary_literal
                      (string_literal
                        (quoted_string
                          (quoted_string_item))))))))))))
    (simple_identifier))
  (class_constructor_declaration
    (class_scope
      (class_type
        (simple_identifier)))
    (class_constructor_arg_list
      (class_constructor_arg
        (tf_port_item
          (data_type_or_implicit
            (data_type))
          name: (simple_identifier)
          (expression
            (primary
              (primary_literal
                (string_literal
                  (quoted_string
                    (quoted_string_item)))))))))
    (list_of_arguments
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier)))))
    (function_statement_or_null
      (function_statement
        (statement
          (statement_item
            (subroutine_call_statement
              (subroutine_call
                (tf_call
                  (hierarchical_identifier
                    (simple_identifier)))))))))
    (one_line_comment)
    (one_line_comment))
  (conditional_compilation_directive)
  (one_line_comment))
