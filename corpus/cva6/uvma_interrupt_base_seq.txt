============================================
cva6/uvma_interrupt_base_seq
============================================

// Copyright 2024 Thales DIS SAS
//
// Licensed under the Solderpad Hardware Licence, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.0
// You may obtain a copy of the License at https://solderpad.org/licenses/
//
// Original Author: Ayoub JALALI (ayoub.jalali@external.thalesgroup.com)


`ifndef __UVMA_INTERRUPT_BASE_SEQ_SV__
`define __UVMA_INTERRUPT_BASE_SEQ_SV__


/**
 * Abstract object from which all other Interrupt agent sequences must extend.
 * Subclasses must be run on Interrupt sequencer (uvma_interrupt_sqr_c) instance.
 */
class uvma_interrupt_base_seq_c extends uvm_sequence#(uvma_interrupt_seq_item_c);
   
   `uvm_object_utils(uvma_interrupt_base_seq_c)
   `uvm_declare_p_sequencer(uvma_interrupt_sqr_c)   
   
   // Objects
   uvma_interrupt_cfg_c    cfg;
   uvma_interrupt_cntxt_c  cntxt;

   uvma_interrupt_seq_item_c  req_item;

   /**
    * Default constructor.
    */
   extern function new(string name="uvma_interrupt_base_seq");

   /**
    * Assigns cfg and cntxt handles from p_sequencer.
    */
   extern virtual task pre_start();

endclass : uvma_interrupt_base_seq_c

function uvma_interrupt_base_seq_c::new(string name="uvma_interrupt_base_seq");
   
   super.new(name);
   
endfunction : new

task uvma_interrupt_base_seq_c::pre_start();

   cfg   = p_sequencer.cfg;
   cntxt = p_sequencer.cntxt;

endtask : pre_start

`endif // __UVMA_INTERRUPT_BASE_SEQ_SV__

----

(source_file
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (one_line_comment)
  (conditional_compilation_directive
    (ifdef_condition
      (simple_identifier)))
  (text_macro_definition
    (text_macro_name
      (simple_identifier)))
  (block_comment)
  (class_declaration
    name: (simple_identifier)
    (class_type
      (simple_identifier)
      (parameter_value_assignment
        (list_of_parameter_value_assignments
          (ordered_parameter_assignment
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))))))))
    (class_item
      (text_macro_usage
        (simple_identifier)
        (list_of_actual_arguments
          (actual_argument
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))))))))
    (class_item
      (text_macro_usage
        (simple_identifier)
        (list_of_actual_arguments
          (actual_argument
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))))))))
    (one_line_comment)
    (class_item
      (class_property
        (data_declaration
          (data_type_or_implicit
            (data_type
              (simple_identifier)))
          (list_of_variable_decl_assignments
            (variable_decl_assignment
              name: (simple_identifier))))))
    (class_item
      (class_property
        (data_declaration
          (data_type_or_implicit
            (data_type
              (simple_identifier)))
          (list_of_variable_decl_assignments
            (variable_decl_assignment
              name: (simple_identifier))))))
    (class_item
      (class_property
        (data_declaration
          (data_type_or_implicit
            (data_type
              (simple_identifier)))
          (list_of_variable_decl_assignments
            (variable_decl_assignment
              name: (simple_identifier))))))
    (block_comment)
    (class_item
      (class_method
        (class_constructor_prototype
          (class_constructor_arg_list
            (class_constructor_arg
              (tf_port_item
                (data_type_or_implicit
                  (data_type))
                name: (simple_identifier)
                (expression
                  (primary
                    (primary_literal
                      (string_literal
                        (quoted_string
                          (quoted_string_item))))))))))))
    (block_comment)
    (class_item
      (class_method
        (method_qualifier)
        (task_prototype
          name: (simple_identifier))))
    (simple_identifier))
  (class_constructor_declaration
    (class_scope
      (class_type
        (simple_identifier)))
    (class_constructor_arg_list
      (class_constructor_arg
        (tf_port_item
          (data_type_or_implicit
            (data_type))
          name: (simple_identifier)
          (expression
            (primary
              (primary_literal
                (string_literal
                  (quoted_string
                    (quoted_string_item)))))))))
    (list_of_arguments
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))))))
  (task_declaration
    (task_body_declaration
      (class_scope
        (class_type
          (simple_identifier)))
      name: (simple_identifier)
      (statement_or_null
        (statement
          (statement_item
            (blocking_assignment
              (operator_assignment
                (variable_lvalue
                  (hierarchical_identifier
                    (simple_identifier)))
                (assignment_operator)
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier)
                      (simple_identifier)))))))))
      (statement_or_null
        (statement
          (statement_item
            (blocking_assignment
              (operator_assignment
                (variable_lvalue
                  (hierarchical_identifier
                    (simple_identifier)))
                (assignment_operator)
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier)
                      (simple_identifier)))))))))
      (simple_identifier)))
  (conditional_compilation_directive)
  (one_line_comment))
